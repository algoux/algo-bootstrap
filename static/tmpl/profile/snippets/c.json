{
  // Here are Algo Bootstrap snippets.
  // Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // ref: https://code.visualstudio.com/docs/editing/userdefinedsnippets
  "for (Algo Bootstrap)": {
    "prefix": [
      "for"
    ],
    "scope": "c,cpp",
    "description": "[algoUX] Snippet for `for` loop",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < ${2:count}; ${3:++${1:i}}) {",
      "    ${0:/* code */}",
      "}"
    ]
  },
  "forr (Algo Bootstrap)": {
    "prefix": [
      "forr"
    ],
    "scope": "c,cpp",
    "description": "[algoUX] Snippet for reverse `for` loop",
    "body": [
      "for (int ${1:i} = ${2:count} - 1; ${1:i} >= ${3:0}; ${4:${1:i}--}) {",
      "    ${0:/* code */}",
      "}"
    ]
  },
  "while (Algo Bootstrap)": {
    "prefix": [
      "while"
    ],
    "scope": "c,cpp",
    "description": "[algoUX] Snippet for while loop",
    "body": [
      "while (${1:/* condition */}) {",
      "    ${2:/* code */}",
      "}",
      "${0}"
    ]
  },
  "do while (Algo Bootstrap)": {
    "prefix": [
      "do"
    ],
    "scope": "c,cpp",
    "description": "[algoUX] Snippet for do while loop",
    "body": [
      "do {",
      "    ${2:/* code */}",
      "} while (${1:/* condition */});",
      "${0}"
    ]
  },
  "switch (Algo Bootstrap)": {
    "prefix": [
      "switch"
    ],
    "scope": "c,cpp",
    "description": "[algoUX] Snippet for switch",
    "body": [
      "switch (${1:expression}) {",
      "    case ${2:/* constant-expression */}:",
      "        ${3:/* code */}",
      "        break;",
      "    default:",
      "        break;",
      "}${0}"
    ]
  },
  "if (Algo Bootstrap)": {
    "prefix": [
      "if"
    ],
    "scope": "c,cpp",
    "description": "[algoUX] Snippet for if statement",
    "body": [
      "if (${1:condition}) {",
      "    ${0:/* code */}",
      "}"
    ]
  },
  "else (Algo Bootstrap)": {
    "prefix": [
      "else"
    ],
    "scope": "c,cpp",
    "description": "[algoUX] Code snippet for else statement",
    "body": [
      "else {",
      "    ${0:/* code */}",
      "}"
    ]
  },
  "else if (Algo Bootstrap)": {
    "prefix": [
      "elif",
      "else if"
    ],
    "scope": "c,cpp",
    "description": "[algoUX] Code snippet for else-if statement",
    "body": [
      "else if (${1:condition}) {",
      "    ${0:/* code */}",
      "}"
    ]
  },
  "#ifdef (Algo Bootstrap)": {
    "prefix": [
      "#ifdef"
    ],
    "scope": "c,cpp",
    "description": "[algoUX] Snippet for #ifdef",
    "body": [
      "#ifdef ${1:DEBUG}",
      "${0:/* code */}",
      "#endif // $1"
    ]
  },
  "#ifndef (Algo Bootstrap)": {
    "prefix": [
      "#ifndef"
    ],
    "scope": "c,cpp",
    "description": "[algoUX] Snippet for #ifndef",
    "body": [
      "#ifndef ${1:ONLINE_JUDGE}",
      "${0:/* code */}",
      "#endif // !$1"
    ]
  },
  "main function (Algo Bootstrap)": {
    "prefix": [
      "main"
    ],
    "scope": "c,cpp",
    "description": "[algoUX] Snippet for main()",
    "body": [
      "int main(int argc, char const *argv[]) {",
      "    ${0:/* code */}",
      "",
      "    return 0;",
      "}",
      ""
    ]
  },
  "init template for C (Algo Bootstrap)": {
    "prefix": "ac",
    "scope": "c",
    "description": "[algoUX] Snippet for C file template",
    "body": [
      "#include <math.h>",
      "#include <stdbool.h>",
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "#include <string.h>",
      "",
      "int main() {",
      "    ${0}",
      "",
      "    return 0;",
      "}",
      ""
    ]
  }
}
